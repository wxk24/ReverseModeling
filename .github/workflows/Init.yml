name: Init

permissions:
  contents: write
  actions: write

on:
  push:
    branches:
      - main

jobs:
  init:
    if: github.repository != 'XiGeoAlgorithm/template-CompositeProject' && github.repository != 'gendloop/template-CompositeProject'
    runs-on: ubuntu-latest
    steps:
      - name: checkout-repo
        uses: actions/checkout@v3

      - name: get-repo-name
        id: get-repo-name
        shell: bash
        run: |
          repo_name=${GITHUB_REPOSITORY#*/}
          echo "reponame=$repo_name" >> "$GITHUB_OUTPUT"

      - name: get-underlined-repo-name
        id: get-u-repo-name
        shell: bash
        run: |
          str=${{ steps.get-repo-name.outputs.reponame }}
          ustr=$(echo "$str" | sed 's/\([A-Z]\)/_\1/g' | tr '[:upper:]' '[:lower:]')
          if [[ ${ustr:0:1} == "_" ]]; then
            ustr=${ustr:1}
          fi
          echo "ureponame=$ustr" >> $GITHUB_OUTPUT

      - name: add-vs-solution
        uses: gendloop/add-vs-solution@main

      - name: replace-README
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "docs/README.md"
          replace-to-path: "README.md"
          str-to-replace: "RepoName"
          replace-to-str: ${{ steps.get-repo-name.outputs.reponame }}

      - name: to-upper
        id: to-upper
        shell: pwsh
        run: |
          $str = "${{ steps.get-repo-name.outputs.reponame }}"
          $upper_str = $str.ToUpper()
          echo "upper_reponame=$upper_str" >> $env:GITHUB_OUTPUT

      - name: replace-include
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "include/xi_export_TARGET.h"
          replace-to-path: "include/xi_export_${{ steps.to-upper.outputs.upper_reponame }}.h"
          str-to-replace: "TARGET"
          replace-to-str: ${{ steps.to-upper.outputs.upper_reponame }}

      - name: replace-xi_export_TARTGET.h
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "src/xi_export_TARGET.h"
          replace-to-path: "src/xi_export_${{ steps.to-upper.outputs.upper_reponame }}.h"
          str-to-replace: "TARGET"
          replace-to-str: ${{ steps.to-upper.outputs.upper_reponame }}

      - name: replace-i_UREPONAME.h-RepoName
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "src/i_UREPONAME.h"
          replace-to-path: "src/i_UREPONAME.h"
          str-to-replace: "RepoName"
          replace-to-str: ${{ steps.get-repo-name.outputs.reponame }}

      - name: replace-i_UREPONAME.h-AUTHOR
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "src/i_UREPONAME.h"
          replace-to-path: "src/i_UREPONAME.h"
          str-to-replace: "AUTHOR"
          replace-to-str: ${{ github.actor }}

      - name: replace-i_UREPONAME.h-OWNER
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "src/i_UREPONAME.h"
          replace-to-path: "src/i_UREPONAME.h"
          str-to-replace: "OWNER"
          replace-to-str: ${{ github.repository_owner }}

      - name: replace-i_UREPONAME.h-TARGET
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "src/i_UREPONAME.h"
          replace-to-path: "src/i_UREPONAME.h"
          str-to-replace: "TARGET"
          replace-to-str: ${{ steps.to-upper.outputs.upper_reponame }}

      - name: replace-i_UREPONAME.h-UREPONAME
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "src/i_UREPONAME.h"
          replace-to-path: "src/i_${{ steps.get-u-repo-name.outputs.ureponame }}.h"
          str-to-replace: "UREPONAME"
          replace-to-str: ${{ steps.get-u-repo-name.outputs.ureponame }}

      - name: replace-create_props
        uses: gendloop/replace-str@v1.0.1
        with:
          token: ${{ github.token }}
          path-to-replace: "scripts/create_props.ps1"
          replace-to-path: "scripts/create_props.ps1"
          str-to-replace: "TARGET"
          replace-to-str: "${{ steps.to-upper.outputs.upper_reponame }}"

      - name: remove
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          Remove-Item include\xi_export_TARGET.h
          Remove-Item src\xi_export_TARGET.h
          Remove-Item src\i_UREPONAME.h
          Remove-Item .github\workflows\Init.yml
          Remove-Item .github\workflows\Sync_Download.yml
          Remove-Item .github\workflows\Mirror_To_New_Repo.yml
          Remove-Item docs\README.md
          Remove-Item config.txt
          Remove-Item scripts\downloadFilesFromRepo.json

      - name: remove-sync-log
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          $file = "sync_log.md"
          if(Test-Path $file) {
            Remove-Item $file -Force
            Write-Host "File $file deleted successfully."
          }
          else {
            Write-Host "File $file does not exist."
          }

      # - name: update-vcxproj
      #   working-directory: ${{ github.workspace }}
      #   shell: bash
      #   run: |
      #     repo_name="${{ steps.get-repo-name.outputs.reponame }}"
      #     cd $repo_name
      #     files=($(find ../src/ -type f \( -name "*.h" -o -name "*.cpp" \)))
      #     replacement=""
      #     count=${#files[@]}
      #     for ((i=0; i<$count; i++)); do
      #       # echo ${files[$i]}
      #       path=$(echo ${files[$i]} | sed 's/\//\\\\/g')
      #       # echo $path
      #       segment="  <ItemGroup>\n    <ClCompile Include=\"$path\" />\n  </ItemGroup>"
      #       if [ $i -ne $(($count-1)) ]; then
      #         segment+="\n"
      #       fi
      #       # echo $segment
      #       replacement+=$segment
      #     done
      #     sed -i '156,157c'"$replacement"'' ./$repo_name.vcxproj

      - name: git-push
        uses: gendloop/git-push@v1.0.0
        with:
          token: ${{ github.token }}
          commit: "chore: update files"

  add_test_proj:
    needs: [init]
    runs-on: ubuntu-latest
    steps:
      - name: add-vs-test-project
        uses: gendloop/add-vs-test-project@main
        with:
          token: ${{ github.token }}

  convert_encoding:
    needs: [add_test_proj]
    runs-on: windows-latest
    steps:
      - name: convert-encoding
        uses: gendloop/convert-encoding@v1.0.1
        with:
          input_coding: "UTF-8"
          output_coding: "UTF-8-BOM"
          path: "src/ include/ tests/common.h tests/example.cpp tests/main.cpp tests/pch.h tests/pch.cpp"

  create_new_branch:
    needs: [convert_encoding]
    runs-on: ubuntu-latest
    steps:
      - name: create-new-branch
        uses: gendloop/create-new-branch@v1.0.1
        with:
          ref_branch: "main"
          branch: "dev"
